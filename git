#!/usr/bin/env bash

GIT_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

git_conventionnal_commits() {
  source "${GIT_SCRIPT_DIR}/worker" && worker_init "var"
  var_color

  declare -gA CONVENTIONAL_COMMIT_SCOPES
  CONVENTIONAL_COMMIT_SCOPES['chore']='Changes in the core of the repository'
  CONVENTIONAL_COMMIT_SCOPES['docs']='Documentation only changes'
  CONVENTIONAL_COMMIT_SCOPES['feat']=$(printf 'A new feature for user %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['fix']=$(printf 'A bug fix for user %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['refactor']=$(printf 'A change that is not a feature not a bug %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['style']='A change that do not affect the meaning of the code'
  CONVENTIONAL_COMMIT_SCOPES['test']='A new test or correcting existing tests'
}

git_is_inside() {
  git rev-parse --is-inside-work-tree 2>&1
}

git_root() {
  if [[ $(git_is_inside) != "true" ]]; then
    pwd
    return
  fi

  git rev-parse --show-toplevel
}

git_remote_repository() {
  if [[ $(git_is_inside) != "true" ]]; then
    return
  fi

  local REMOTE_URL
  REMOTE_URL="$(git remote get-url --push "$(git remote show | head -1)")"

  if [[ ${REMOTE_URL} =~ ^.*@.*:(.*)\/(.*).git$ ]]; then
    printf "%s/%s" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
  fi
}

git_last_tag() {
  if [[ $(git_is_inside) != "true" ]]; then
    return
  fi

  git describe --tag 2> /dev/null | awk -F "-" '{print $1}'
}

git_is_merge_commit() {
  if [[ ${1} =~ Merge\ (pull\ request|branch) ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_is_commit_wip() {
  if [[ ${1} =~ ^fixup\! ]]; then
    printf "true"
    return
  fi

  local WIP_REGEX="\\bwip\\b"
  if [[ ${OSTYPE} =~ ^darwin ]]; then
    WIP_REGEX="[[:<:]]wip[[:>:]]"
  fi

  if [[ ${1} =~ ${WIP_REGEX} ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_is_conventional_commit() {
  git_conventionnal_commits

  shopt -s nocasematch
  if [[ ${1} =~ ^(revert:\ )?($(IFS='|'; echo "${!CONVENTIONAL_COMMIT_SCOPES[*]}"))(\(.+\))?\!?:\ [a-zA-Z0-9\[\(]+ ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_is_valid_description() {
  export COMMIT_MAX_LENGTH="70"

  if [[ ${1} =~ ^.{1,${COMMIT_MAX_LENGTH}}$ ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_conventionnal_commit_guidelines() {
  source "${GIT_SCRIPT_DIR}/worker" && worker_init "var"
  var_color
  git_conventionnal_commits

  printf "%bGuidelines for prefixing commit message from conventionalcommits.org%b\n\n" "${YELLOW}" "${RESET}"

  for prefix in "${!CONVENTIONAL_COMMIT_SCOPES[@]}"; do
    printf "%b%s%b(component)%b:%b\n" "${GREEN}" "${prefix}" "${BLUE}" "${GREEN}" "${RESET}"
    printf "\t%s\n" "${CONVENTIONAL_COMMIT_SCOPES[${prefix}]}"
  done

  printf "\n\n%bYou can add '!' before ':', for indicating breaking change%b\n" "${YELLOW}" "${RESET}"
  printf "\n\t%bfeat%b(api)%b!%b:%b Adding mandatory parameter on signup\n\n" "${GREEN}" "${BLUE}" "${RED}" "${GREEN}" "${RESET}"
}

git_valid_description_guideline() {
  source "${GIT_SCRIPT_DIR}/worker" && worker_init "var"
  var_color

  printf "\n%bYou have to use a short commit description (max %d characters)%b\n\n" "${YELLOW}" "${COMMIT_MAX_LENGTH:-70}" "${RESET}"
}


